<?php

namespace App;

use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Sagartakle\Laracrud\Helpers\Traits\ActivityTrait;

class User extends Authenticatable
{
    use Notifiable,SoftDeletes,ActivityTrait;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'title','first_name', 'last_name', 'email', 'country_phone_code', 'phone_no', 'gender', 'date_of_birth', 'profile_pic', 'context_id', 'context_type', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
    * @return bool
    */
    public function isSuperAdmin()
    {
        return $this->roles->contains('name', 'Super_admin');
    }

    /**
     * @return bool
     */
    public function isAdmin()
    {
        return $this->roles->contains('name', 'Admin') || $this->isSuperAdmin();
    }

    /**
     * Get the user's full name.
     *
     * @return string
     */
    public function getNameAttribute()
    {
        return ucfirst($this->title).' '.ucfirst($this->first_name).' '.ucfirst($this->last_name);
    }

    /**
     * get context by context_id of this user
     * @return context
     */
    public function context()
    {
        return $this->morphTo();
    }

    /**
     * get module info of this Employees.
     *
     * @param module
     *
     * @return void
     */
    public Static function get_module()
    {
        return \Module::where('name', 'Users')->first();
    }

    /**
     * get profile_pic by context_id of this user
     * @return profile_pic
     */
    public function profile_pic()
    {
        if(isset($this->profile_pic) && $this->profile_pic != "0") {
            return \CustomHelper::img($this->profile_pic);
        } else if(isset($this->gender) && $this->gender == "Female") {
            return asset('public/img/female_profile.jpg');
        } else {
            return asset('public/img/male_profile.jpg');
        }
    }

    /**
     * @return boolean,
     */
    public function hasRoles($roles)
    {
        if($this->isSuperAdmin()) {
            return $this->isSuperAdmin();
        } if (is_string($roles)) {
            return $this->roles->contains('name', $roles);
        } else if(is_array($roles)){
            foreach($roles as $role) {
                if (is_string($role) && $this->roles->contains('name', $role)) {
                    return true;
                }
            }
        }
        return false;
    }

    /*
    |--------------------------------------------------------------------------
    | RELATIONS
    |--------------------------------------------------------------------------
    */
    /**
     * A user belongs to some users of the model associated with its guard.
     */
    public function access_modules()
    {
        return $this->morphMany('App\Models\AccessModule', 'assessor');
    }
    
    /**
     * A model may have multiple roles.
     */
    public function roles()
    {
        return $this->morphToMany('Sagartakle\Laracrud\Models\Role', 'rollable');
    }
}
